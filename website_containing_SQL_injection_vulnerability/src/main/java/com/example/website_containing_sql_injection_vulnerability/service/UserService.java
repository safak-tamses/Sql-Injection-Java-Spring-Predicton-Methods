package com.example.website_containing_sql_injection_vulnerability.service;

import com.example.website_containing_sql_injection_vulnerability.model.User;
import com.example.website_containing_sql_injection_vulnerability.repository.UserRepository;
import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import lombok.AllArgsConstructor;
import org.hibernate.Session;
import org.springframework.stereotype.Service;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

@Service
@AllArgsConstructor
public class UserService {
    private final UserRepository userRepository;
    private final EntityManager entityManager;
    private final SecurityChecker securityChecker;

    public User findByUsername(String username) {
        return userRepository.findByUsername(username);
    }


    //SQL injection zafiyeti barındıran kod bloğu:
    // Payloadı => ' OR '1'='1
    public boolean findByUsernameAndPassword(String username, String password) {
        String queryString = "SELECT * FROM _user WHERE username='" + username + "' AND password='" + password + "'";
        Query query = entityManager.createNativeQuery(queryString, User.class);
        if (query.getResultList().size() > 0) {
            return true;
        } else return false;
    }


/* Bu kod bloğu jpa repository nin hazır fonksiyonlarını kullanarak uygulamayı sql injection zafiyetinden korunaklı hale getirmiştir. */

//    public boolean findByUsernameAndPassword(String username, String password) {
//        User temp = findByUsername(username);
//        if (temp != null && temp.getPassword().equals(password)) {
//            return true;
//        } else return false;
//    }

/* Bu kod bloğunda bir static blacklist kullanarak sql sorgusu içerisine gönderilen inputların injection zafiyeti barındırım barındırmadğını kontrol etmektedir. */

//    public boolean findByUsernameAndPassword(String username, String password) {
//        String queryString = "SELECT * FROM _user WHERE username='" + securityChecker.isSafeInput(username) + "' AND password='" + securityChecker.isSafeInput(password) + "'";
//        Query query = entityManager.createNativeQuery(queryString, User.class);
//        if (query.getResultList().size() > 0) {
//            return true;
//        } else return false;
//    }

/* Bu kod bloğu PreparedStatement fonskiyon yapısını kullanarak sorgu kelimelerini güvenli hale getirmiştir. */

//    public boolean findByUsernameAndPassword(String username, String password) {
//        String queryString = "SELECT * FROM _user WHERE username=? AND password=?";
//        Query query = entityManager.createNativeQuery(queryString, User.class);
//
//        List<User> resultList = entityManager.unwrap(Session.class).doReturningWork(
//                connection -> {
//                    try (PreparedStatement ps = connection.prepareStatement(queryString)) {
//                        ps.setString(1, username);
//                        ps.setString(2, password);
//                        try (ResultSet rs = ps.executeQuery()) {
//                            List<User> users = new ArrayList<>();
//                            while (rs.next()) {
//                                User user = new User();
//                                user.setId(rs.getLong("id"));
//                                user.setUsername(rs.getString("username"));
//                                user.setPassword(rs.getString("password"));
//                                users.add(user);
//                            }
//                            return users;
//
//                        }
//                    }
//                }
//        );
//        if (resultList.size() > 0) {
//            return true;
//        } else {
//            return false;
//        }
//    }



}
